test_kubecontrol:
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config get-contexts
    - kubectl config use-context partavate/infrastructure:partavate-production-k8s 
    - kubectl get pods

stages:
  - test
  - build
  - deploy_client_staging

test_client:
  stage: test
  image: node:lts-alpine
  script:
    - cd client/
    - npm install
    - npm run test

docker_build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind # Docker-in-docker, runs on Gitlab infra
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - cd client/
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

deploy_client_staging:
  stage: deploy_client_staging
  when: manual
  script:
    - kubectl config get-contexts
    - kubectl config use-context partavate/infrastructure:partavate-production-k8s
    - kubectl set image --namespace websites deployment/polydice-client-staging polydice-client=$REPO_REGISTRY_URL:$TAG

